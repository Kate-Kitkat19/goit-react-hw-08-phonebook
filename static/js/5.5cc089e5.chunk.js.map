{"version":3,"file":"static/js/5.5cc089e5.chunk.js","mappings":"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","sources":["components/ContactForm/Validation.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactCard/ContactCard.jsx","redux/filter/selectors.js","components/Contacts/Contacts.jsx","components/Filter/Filter.jsx","components/HomePage/HomePage.js"],"sourcesContent":["import * as Yup from 'yup';\n\n\nexport const ValidationSchema = Yup.object().shape({\n  name: Yup.string()\n    .matches(\n      /(^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$)/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required('This field is required'),\n  number: Yup.string()\n    .matches(\n      /(\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9})/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('This field is required'),\n});\n","export const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectContacts = state => state.contacts.items;","import { Formik, Field } from 'formik';\nimport React from 'react';\nimport { ValidationSchema } from './Validation';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport {\n  Icon,\n  Button,\n  InputLeftAddon,\n  FormControl,\n  FormErrorMessage,\n  Container,\n  Input,\n  VStack,\n  InputGroup,\n  useToast,\n} from '@chakra-ui/react';\n\nimport { PhoneIcon } from '@chakra-ui/icons';\nimport { ImUser } from 'react-icons/im';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const toast = useToast();\n\n  return (\n    <Container marginBottom={4} centerContent maxW=\"sm\">\n      <Formik\n        initialValues={{\n          name: '',\n          number: '',\n        }}\n        onSubmit={(values, { resetForm }) => {\n          const contactName = values.name.toLowerCase();\n          const isSaved = contacts.find(\n            contact => contact.name.toLowerCase() === contactName\n          );\n          if (isSaved) {\n            return toast({\n              title: `${values.name} is already in contacts`,\n              position: 'top',\n              status: 'error',\n              duration: 5000,\n              isClosable: true,\n            });\n          } else {\n            dispatch(addContact({ name: values.name, number: values.number }));\n          }\n          resetForm();\n        }}\n        validationSchema={ValidationSchema}\n      >\n        {({ handleSubmit, errors, touched }) => (\n          <form onSubmit={handleSubmit}>\n            <VStack spacing={4}>\n              <FormControl isRequired isInvalid={!!errors.name && touched.name}>\n                <InputGroup>\n                  <InputLeftAddon\n                    pointerEvents=\"none\"\n                    children={<Icon as={ImUser} color=\"gray.300\" />}\n                  />\n                  <Field\n                    as={Input}\n                    type=\"text\"\n                    name=\"name\"\n                    placeholder=\"Name\"\n                    width=\"full\"\n                    borderColor=\"gray.300\"\n                    errorBorderColor=\"red.400\"\n                  ></Field>\n                </InputGroup>\n                <FormErrorMessage>{errors.name}</FormErrorMessage>\n              </FormControl>\n              <FormControl isInvalid={!!errors.number && touched.number}>\n                <InputGroup>\n                  <InputLeftAddon\n                    pointerEvents=\"none\"\n                    children={<PhoneIcon color=\"gray.300\" />}\n                  />\n                  <Field\n                    as={Input}\n                    type=\"tel\"\n                    name=\"number\"\n                    placeholder=\"Phone number\"\n                    width=\"full\"\n                    borderColor=\"gray.300\"\n                    errorBorderColor=\"red.400\"\n                  ></Field>\n                </InputGroup>\n                <FormErrorMessage maxW=\"sm\">{errors.number}</FormErrorMessage>\n              </FormControl>\n              <Button\n                type=\"submit\"\n                aria-label=\"Add contact\"\n                colorScheme=\"green\"\n                width=\"50%\"\n              >\n                Add contact\n              </Button>\n            </VStack>\n          </form>\n        )}\n      </Formik>\n    </Container>\n  );\n};\n\nexport default ContactForm;\n","import { PropTypes } from 'prop-types';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { useDispatch } from 'react-redux';\n\nimport { DeleteIcon } from '@chakra-ui/icons';\nimport { IconButton, Text, HStack, Spacer } from '@chakra-ui/react';\nimport { useState } from 'react';\n\nexport const ContactCard = ({ name, number, id }) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const dispatch = useDispatch();\n  function deleteItem(id) {\n    setIsLoading(true);\n    dispatch(deleteContact(id));\n  }\n\n  return (\n    <HStack\n      spacing={2}\n      width={['16rem', '20rem']}\n      flexDirection=\"row\"\n      justifyContent=\"space-between\"\n      marginBottom={2}\n    >\n      <Text fontSize=\"lg\" fontFamily=\"'Crimson Text', serif;\">\n        {name}\n      </Text>\n      <Text fontSize=\"lg\" fontFamily=\"'Crimson Text', serif;\">\n        {number}\n      </Text>\n\n      <Spacer></Spacer>\n      <IconButton\n        isLoading={isLoading}\n        type=\"button\"\n        onClick={() => deleteItem(id)}\n        icon={<DeleteIcon />}\n        size=\"sm\"\n      ></IconButton>\n    </HStack>\n  );\n};\n\nContactCard.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n","\nexport const selectFilter = state => state.filter;\n\n","import { ContactCard } from '../ContactCard/ContactCard';\nimport { selectFilter } from 'redux/filter/selectors';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { useSelector } from 'react-redux';\nimport { Container, VStack } from '@chakra-ui/react';\n\nexport const Contacts = () => {\n  const contactList = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const visibleContacts = filter\n    ? contactList.filter(person =>\n        person.name.toLowerCase().includes(filter.toLowerCase())\n      )\n    : contactList;\n\n  return (\n    <Container marginTop={4} centerContent maxW=\"xl\" as=\"ul\">\n      {visibleContacts.map(({ name, number, id }) => {\n        return (\n          <VStack width=\"full\" as=\"li\" key={id}>\n            <ContactCard name={name} number={number} id={id} />\n          </VStack>\n        );\n      })}\n    </Container>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { updateFilter } from 'redux/filter/filtersSlice';\nimport { Input } from '@chakra-ui/react';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  function handleUpdate(evt) {\n    const query = evt.target.value;\n    dispatch(updateFilter(query));\n  }\n\n  return (\n    <Input\n      marginTop={4}\n      placeholder=\"Find contact by name\"\n      type=\"text\"\n      name=\"filter\"\n      width=\"auto\"\n      onChange={handleUpdate}\n      borderColor=\"gray.300\"\n    />\n  );\n};\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport { Contacts } from 'components/Contacts/Contacts';\nimport { Filter } from 'components/Filter/Filter';\n\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Heading } from '@chakra-ui/react';\nconst HomePage = () => {\n  // const isLoading = useSelector(selectIsLoading);\n  // const error = useSelector(selectError);\n  const contactList = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ContactForm></ContactForm>\n      <Filter></Filter>\n      {contactList.length > 0 && (\n        <Heading\n          marginTop={4}\n          fontWeight=\"bold\"\n          fontFamily=\"'Crimson Text', serif\"\n        >\n          Contacts\n        </Heading>\n      )}\n\n      <Contacts></Contacts>\n    </>\n  );\n};\n\nexport default HomePage;\n"],"names":["ValidationSchema","Yup","shape","name","matches","required","number","selectContacts","state","contacts","items","useSelector","dispatch","useDispatch","toast","useToast","marginBottom","centerContent","maxW","initialValues","onSubmit","values","resetForm","contactName","toLowerCase","find","contact","title","position","status","duration","isClosable","addContact","validationSchema","handleSubmit","errors","touched","spacing","isRequired","isInvalid","pointerEvents","children","as","ImUser","color","Input","type","placeholder","width","borderColor","errorBorderColor","colorScheme","ContactCard","id","useState","isLoading","setIsLoading","flexDirection","justifyContent","fontSize","fontFamily","onClick","deleteContact","deleteItem","icon","size","selectFilter","filter","Contacts","contactList","visibleContacts","person","includes","marginTop","map","Filter","I","onChange","evt","query","target","value","updateFilter","useEffect","fetchContacts","length","fontWeight"],"sourceRoot":""}