{"version":3,"file":"static/js/612.d64ecfc6.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","components/ContactForm/Validation.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactCard/ContactCard.styled.js","components/ContactCard/ContactCard.jsx","components/Contacts/Contacts.styled.js","redux/filter/selectors.js","components/Contacts/Contacts.jsx","components/Filter/Filter.jsx","components/HomePage/HomePage.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, Field } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  padding: 25px;\n  width: 100%;\n  margin-bottom: 20px;\n\n  @media screen and (min-width: 1200px) {\n    max-width: 1000px;\n  }\n`;\n\nexport const Label = styled.label`\n  margin: 10px auto;\n  min-width: 20px;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 15px;\n  position: relative;\n  font-size: 18px;\n  font-family: 'Roboto Serif', serif;\n  font-weight: 400;\n`;\n\nexport const FormInput = styled(Field)`\n  font: inherit;\n  letter-spacing: inherit;\n  color: black;\n  outline: none;\n  border: none;\n  border: 1px solid #dad2bc;\n  height: 50px;\n  max-width: 400px;\n  @media screen and (min-width: 1200px) {\n    max-width: 600px;\n  }\n  padding: 16.5px 14px;\n  transition: border 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,\n    box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n\n  &:hover,\n  &:focus {\n    border: 1px solid #7c0b2b;\n    box-shadow: 0px 3px 1px -2px rgb(0 0 0 / 20%),\n      0px 2px 2px 0px rgb(0 0 0 / 14%), 0px 1px 5px 0px rgb(0 0 0 / 12%);\n  }\n`;\n\nexport const Button = styled.button`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  outline: 0;\n  border: 0;\n  margin: 0 auto;\n  cursor: pointer;\n  user-select: none;\n  vertical-align: middle;\n  text-transform: uppercase;\n  text-decoration: none;\n  color: inherit;\n  font-family: 'Roboto Serif', serif;\n  font-weight: 400;\n  font-size: 18px;\n  line-height: 1.75;\n  letter-spacing: 0.02857em;\n  text-transform: uppercase;\n  min-width: 64px;\n  max-width: 200px;\n  width: 100%;\n  padding: 6px 16px;\n  border-radius: 4px;\n  transition: box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n  color: black;\n  background-color: #59cd90;\n  box-shadow: 0px 3px 1px -2px rgb(0 0 0 / 20%),\n    0px 2px 2px 0px rgb(0 0 0 / 14%), 0px 1px 5px 0px rgb(0 0 0 / 12%);\n\n  &:hover,\n  &:focus {\n    box-shadow: 0px 2px 4px -1px rgb(0 0 0 / 20%),\n      0px 4px 5px 0px rgb(0 0 0 / 14%), 0px 1px 10px 0px rgb(0 0 0 / 12%);\n  }\n`;\n\nexport const ErrorText = styled.p`\n  font-size: 18px;\n  color: #f95738;\n  text-transform: uppercase;\n  margin: 0;\n`;\n","import * as Yup from 'yup';\n\nexport const ValidationSchema = Yup.object().shape({\n  name: Yup.string()\n    .matches(\n      /(^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$)/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required('This field is required'),\n    number: Yup.string()\n    .matches(\n      /(\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9})/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('This field is required'),\n});\n","export const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectContacts = state => state.contacts.items;","import { Formik, ErrorMessage, Field, Form } from 'formik';\nimport React from 'react';\n// import { Button } from './ContactForm.styled';\nimport { ErrorText, Button } from './ContactForm.styled';\nimport { ValidationSchema } from './Validation';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport { toast } from 'react-toastify';\nimport { Icon } from '@chakra-ui/react';\n\nimport { Input, VStack, InputGroup, InputLeftElement } from '@chakra-ui/react';\nimport { PhoneIcon } from '@chakra-ui/icons';\nimport { ImUser } from 'react-icons/im';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const INITIAL_VALUES = {\n    name: '',\n    number: '',\n  };\n\n  const handleSubmit = (values, { resetForm }) => {\n    const contactName = values.name.toLowerCase();\n    const isSaved = contacts.find(\n      contact => contact.name.toLowerCase() === contactName\n    );\n    if (isSaved) {\n      alert(`${values.name} is already in contacts`);\n    } else {\n      dispatch(addContact({ name: values.name, number: values.number })).then(\n        toast.success('Contact has been added')\n      );\n    }\n    resetForm();\n  };\n\n  return (\n    <Formik\n      onSubmit={handleSubmit}\n      validationSchema={ValidationSchema}\n      initialValues={{ ...INITIAL_VALUES }}\n    >\n      <Form>\n        <VStack spacing={4} align=\"flex-start\">\n          <InputGroup>\n            <InputLeftElement\n              pointerEvents=\"none\"\n              children={<Icon as={ImUser} color=\"gray.300\" />}\n            />\n            <Field\n              as={Input}\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Name\"\n              width=\"auto\"\n            ></Field>\n            <ErrorMessage name=\"name\" component={ErrorText}></ErrorMessage>\n          </InputGroup>\n          <InputGroup>\n            <InputLeftElement\n              pointerEvents=\"none\"\n              children={<PhoneIcon color=\"gray.300\" />}\n            />\n            <Field\n              as={Input}\n              type=\"tel\"\n              name=\"number\"\n              placeholder=\"Phone number\"\n              width=\"auto\"\n            ></Field>\n            <ErrorMessage name=\"number\" component={ErrorText}></ErrorMessage>\n          </InputGroup>\n\n          <Button type=\"submit\" aria-label=\"Add contact\">\n            Submit\n          </Button>\n        </VStack>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n","import styled from 'styled-components';\n\nexport const Card = styled.div`\n  display: flex;\n  gap: 10px;\n  align-items: center;\n  margin: 0 auto;\n  justify-content: center;\n`;\n\nexport const Wrapper = styled.div`\n  margin-right: 30px;\n  display: flex;\n  gap: 10px;\n`;\n\nexport const Text = styled.span`\n  font-size: 20px;\n  font-family: 'Crimson Text', serif;\n`;\n\nexport const Button = styled.button`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  outline: 0;\n  border: 0;\n  cursor: pointer;\n  user-select: none;\n  vertical-align: middle;\n  text-decoration: none;\n  color: inherit;\n  font-family: 'Roboto Serif', serif;\n  font-weight: 400;\n  font-size: 14px;\n  line-height: 1.75;\n  letter-spacing: 0.03;\n  max-width: 200px;\n  width: 100%;\n  padding: 6px 8px;\n  border-radius: 4px;\n  transition: box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n  color: black;\n  background-color: #f79d84;\n  box-shadow: 0px 3px 1px -2px rgb(0 0 0 / 20%),\n    0px 2px 2px 0px rgb(0 0 0 / 14%), 0px 1px 5px 0px rgb(0 0 0 / 12%);\n\n  &:hover,\n  &:focus {\n    box-shadow: 0px 2px 4px -1px rgb(0 0 0 / 20%),\n      0px 4px 5px 0px rgb(0 0 0 / 14%), 0px 1px 10px 0px rgb(0 0 0 / 12%);\n  }\n`;\n","import { PropTypes } from 'prop-types';\nimport { Card, Button, Text, Wrapper } from './ContactCard.styled';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { DeleteIcon } from '@chakra-ui/icons';\n\nexport const ContactCard = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n\n  function deleteItem(id) {\n    dispatch(deleteContact(id)).then(toast.success('Contact has been deleted'));\n  }\n\n  return (\n    <Card>\n      <Wrapper>\n        <Text>{name}</Text>\n        <Text>{number}</Text>\n      </Wrapper>\n      <Button type=\"button\" onClick={() => deleteItem(id)}>\n        Delete contact <DeleteIcon />\n      </Button>\n    </Card>\n  );\n};\n\nContactCard.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  width: 100%;\n`;\n\nexport const ListItem = styled.li`\n  margin: 10px auto;\n`;\n\nexport const Title = styled.h2`\n  font-family: 'Roboto Serif', serif;\n  margin: 20px auto;\n  padding: 0;\n`;\n","\nexport const selectFilter = state => state.filter;\n\n","import { ContactCard } from '../ContactCard/ContactCard';\nimport { List, ListItem } from './Contacts.styled';\nimport { selectFilter } from 'redux/filter/selectors';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { useSelector } from 'react-redux';\n\nexport const Contacts = () => {\n  const contactList = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const visibleContacts = filter\n    ? contactList.filter(person =>\n        person.name.toLowerCase().includes(filter.toLowerCase())\n      )\n    : contactList;\n\n  return (\n    <List>\n      {visibleContacts.map(({ name, number, id }) => {\n        return (\n          <ListItem key={id}>\n            <ContactCard name={name} number={number} id={id} />\n          </ListItem>\n        );\n      })}\n    </List>\n  );\n};\n","// import { StyledFilter, StyledLabel } from './Filter.styled';\nimport { useDispatch } from 'react-redux';\nimport { updateFilter } from 'redux/filter/filtersSlice';\nimport { Input } from '@chakra-ui/react';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  function handleUpdate(evt) {\n    const query = evt.target.value;\n    dispatch(updateFilter(query));\n  }\n\n  return (\n    <Input\n      variant=\"outline\"\n      placeholder=\"Find contact by name\"\n      type=\"text\"\n      name=\"filter\"\n      width='auto'\n      onChange={handleUpdate}\n    />\n  );\n};\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport { Contacts } from 'components/Contacts/Contacts';\nimport { Filter } from 'components/Filter/Filter';\nimport { Title } from 'components/Contacts/Contacts.styled';\nimport {\n  selectError,\n  selectIsLoading,\n  selectContacts,\n} from 'redux/contacts/selectors';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nconst HomePage = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const contactList = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ContactForm></ContactForm>\n      <Filter></Filter>\n      {contactList.length > 0 && <Title>Contacts</Title>}\n      {isLoading && !error && <b>Loading...</b>}\n      <Contacts></Contacts>\n    </>\n  );\n};\n\nexport default HomePage;\n"],"names":["Button","styled","Form","Field","ErrorText","ValidationSchema","Yup","shape","name","matches","required","number","selectIsLoading","state","contacts","isLoading","selectError","error","selectContacts","items","useSelector","dispatch","useDispatch","onSubmit","values","resetForm","contactName","toLowerCase","find","contact","alert","addContact","then","toast","validationSchema","initialValues","spacing","align","pointerEvents","children","as","ImUser","color","Input","type","placeholder","width","component","Card","Wrapper","Text","ContactCard","id","onClick","deleteContact","deleteItem","List","ListItem","Title","selectFilter","filter","Contacts","contactList","visibleContacts","person","includes","map","Filter","I","variant","onChange","evt","query","target","value","updateFilter","useEffect","fetchContacts","length"],"sourceRoot":""}