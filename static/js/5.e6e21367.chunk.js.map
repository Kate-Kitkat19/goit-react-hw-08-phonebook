{"version":3,"file":"static/js/5.e6e21367.chunk.js","mappings":"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","sources":["components/ContactForm/Validation.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactCard/ContactCard.jsx","redux/filter/selectors.js","components/Contacts/Contacts.jsx","components/Filter/Filter.jsx","components/HomePage/HomePage.js"],"sourcesContent":["import * as Yup from 'yup';\n\n\nexport const ValidationSchema = Yup.object().shape({\n  name: Yup.string()\n    .matches(\n      /(^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$)/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required('This field is required'),\n  number: Yup.string()\n    .matches(\n      /(\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9})/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('This field is required'),\n});\n","export const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectContacts = state => state.contacts.items;","import { Formik, Field } from 'formik';\nimport React from 'react';\nimport { ValidationSchema } from './Validation';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport {\n  Icon,\n  Button,\n  InputLeftAddon,\n  FormControl,\n  FormErrorMessage,\n  Container,\n  Input,\n  VStack,\n  InputGroup,\n  useToast\n} from '@chakra-ui/react';\n\nimport { PhoneIcon } from '@chakra-ui/icons';\nimport { ImUser } from 'react-icons/im';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\nconst toast = useToast();\n\n  return (\n    <Container marginBottom={4} centerContent maxW=\"sm\">\n      <Formik\n        initialValues={{\n          name: '',\n          number: '',\n        }}\n        onSubmit={(values, { resetForm }) => {\n          const contactName = values.name.toLowerCase();\n          const isSaved = contacts.find(\n            contact => contact.name.toLowerCase() === contactName\n          );\n          if (isSaved) {\n            return toast({\n              title: `${values.name} is already in contacts`,\n              position: 'top',\n              status: 'error',\n              duration: 5000,\n              isClosable: true,\n            });\n          } else {\n            dispatch(addContact({ name: values.name, number: values.number }));\n          }\n          resetForm();\n        }}\n        validationSchema={ValidationSchema}\n      >\n        {({ handleSubmit, errors, touched }) => (\n          <form onSubmit={handleSubmit}>\n            <VStack spacing={4}>\n              <FormControl isRequired isInvalid={!!errors.name && touched.name}>\n                <InputGroup>\n                  <InputLeftAddon\n                    pointerEvents=\"none\"\n                    children={<Icon as={ImUser} color=\"gray.300\" />}\n                  />\n                  <Field\n                    as={Input}\n                    type=\"text\"\n                    name=\"name\"\n                    placeholder=\"Name\"\n                    width=\"full\"\n                  ></Field>\n                </InputGroup>\n                <FormErrorMessage>{errors.name}</FormErrorMessage>\n              </FormControl>\n              <FormControl isInvalid={!!errors.number && touched.number}>\n                <InputGroup>\n                  <InputLeftAddon\n                    pointerEvents=\"none\"\n                    children={<PhoneIcon color=\"gray.300\" />}\n                  />\n                  <Field\n                    as={Input}\n                    type=\"tel\"\n                    name=\"number\"\n                    placeholder=\"Phone number\"\n                    width=\"full\"\n                  ></Field>\n                </InputGroup>\n                <FormErrorMessage>{errors.number}</FormErrorMessage>\n              </FormControl>\n              <Button\n                type=\"submit\"\n                aria-label=\"Add contact\"\n                colorScheme=\"green\"\n                width=\"full\"\n              >\n                Add contact\n              </Button>\n            </VStack>\n          </form>\n        )}\n      </Formik>\n    </Container>\n  );\n};\n\nexport default ContactForm;\n","import { PropTypes } from 'prop-types';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { useDispatch } from 'react-redux';\n\n\nimport { DeleteIcon } from '@chakra-ui/icons';\n\nexport const ContactCard = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n  function deleteItem(id) {\n    dispatch(deleteContact(id))\n  }\n\n  return (\n    <div>\n      <div>\n        <span>{name}</span>\n        <span>{number}</span>\n      </div>\n      <button type=\"button\" onClick={() => deleteItem(id)}>\n        Delete contact <DeleteIcon />\n      </button>\n    </div>\n  );\n};\n\nContactCard.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n","\nexport const selectFilter = state => state.filter;\n\n","import { ContactCard } from '../ContactCard/ContactCard';\nimport { selectFilter } from 'redux/filter/selectors';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { useSelector } from 'react-redux';\n\nexport const Contacts = () => {\n  const contactList = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const visibleContacts = filter\n    ? contactList.filter(person =>\n        person.name.toLowerCase().includes(filter.toLowerCase())\n      )\n    : contactList;\n\n  return (\n    <ul>\n      {visibleContacts.map(({ name, number, id }) => {\n        return (\n          <li key={id}>\n            <ContactCard name={name} number={number} id={id} />\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n","\nimport { useDispatch } from 'react-redux';\nimport { updateFilter } from 'redux/filter/filtersSlice';\nimport { Input } from '@chakra-ui/react';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  function handleUpdate(evt) {\n    const query = evt.target.value;\n    dispatch(updateFilter(query));\n  }\n\n  return (\n    <Input\n      variant=\"outline\"\n      placeholder=\"Find contact by name\"\n      type=\"text\"\n      name=\"filter\"\n      width='auto'\n      onChange={handleUpdate}\n    />\n  );\n};\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport { Contacts } from 'components/Contacts/Contacts';\nimport { Filter } from 'components/Filter/Filter';\n\nimport {\n  selectError,\n  selectIsLoading,\n  selectContacts,\n} from 'redux/contacts/selectors';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nconst HomePage = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const contactList = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ContactForm></ContactForm>\n      <Filter></Filter>\n      {contactList.length > 0 && <h2>Contacts</h2>}\n      {isLoading && !error && <b>Loading...</b>}\n      <Contacts></Contacts>\n    </>\n  );\n};\n\nexport default HomePage;\n"],"names":["ValidationSchema","Yup","shape","name","matches","required","number","selectIsLoading","state","contacts","isLoading","selectError","error","selectContacts","items","useSelector","dispatch","useDispatch","toast","useToast","marginBottom","centerContent","maxW","initialValues","onSubmit","values","resetForm","contactName","toLowerCase","find","contact","title","position","status","duration","isClosable","addContact","validationSchema","handleSubmit","errors","touched","spacing","isRequired","isInvalid","pointerEvents","children","as","ImUser","color","Input","type","placeholder","width","colorScheme","ContactCard","id","onClick","deleteContact","deleteItem","selectFilter","filter","Contacts","contactList","visibleContacts","person","includes","map","Filter","I","variant","onChange","evt","query","target","value","updateFilter","useEffect","fetchContacts","length"],"sourceRoot":""}