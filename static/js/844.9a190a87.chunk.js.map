{"version":3,"file":"static/js/844.9a190a87.chunk.js","mappings":"kOAOaA,EAAiB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC/B,OACE,UAAC,IAAD,CAAOC,OAAO,QAAd,WACE,SAAC,IAAD,KACA,UAAC,IAAD,qBAAoBD,EAApB,cACA,SAAC,IAAD,iCAGL,C,iPC0FD,UAnFqB,WACnB,IAAME,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,KACRC,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,IAC1B,GAAwBC,EAAAA,EAAAA,WAAS,GAAjC,eAAOC,EAAP,KAAaC,EAAb,KA8BA,OACE,SAAC,KAAD,CAAKC,UAAW,EAAhB,UACE,UAAC,IAAD,WACGN,IAAS,SAAC,IAAD,CAAgBN,OAAO,kBACjC,SAAC,IAAD,CACEa,GAAG,OACHC,SAjCa,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACTC,EAAOF,EAAKG,SAASD,KAAKE,MAC1BC,EAAQL,EAAKG,SAASE,MAAMD,MAC5BE,EAAWN,EAAKG,SAASG,SAASF,MACxC,MAAa,KAATF,GAAyB,KAAVG,GAA6B,KAAbC,EAC1BnB,EAAM,CACXoB,MAAO,0BACPC,SAAU,MACVxB,OAAQ,QACRyB,SAAU,IACVC,YAAY,IAELJ,EAASK,OAAS,EACpBxB,EAAM,CACXoB,MAAO,4CACPC,SAAU,MACVxB,OAAQ,QACRyB,SAAU,IACVC,YAAY,KAGhBzB,GAAS2B,EAAAA,EAAAA,IAAS,CAAEV,KAAAA,EAAMG,MAAAA,EAAOC,SAAAA,KAAaO,SAASC,KAAKC,QAAQC,UACpEhB,EAAKiB,QACN,EASOC,aAAa,MACbC,UAAU,SAJZ,UAME,UAAC,IAAD,YACE,UAAC,IAAD,CAAWxB,UAAW,EAAtB,sBAEE,SAAC,EAAAyB,EAAD,CAAOC,KAAK,OAAOnB,KAAK,OAAOoB,QAAQ,UAAUC,KAAK,WAExD,UAAC,IAAD,CAAW5B,UAAW,EAAtB,mBAEE,SAAC,EAAAyB,EAAD,CAAOC,KAAK,QAAQnB,KAAK,QAAQoB,QAAQ,UAAUC,KAAK,WAE1D,UAAC,IAAD,CAAW5B,UAAW,EAAtB,sBAEE,UAAC,IAAD,CAAY6B,MAAM,OAAlB,WACE,SAAC,EAAAJ,EAAD,CACEC,KAAM5B,EAAO,OAAS,WACtBS,KAAK,WACLoB,QAAQ,UACRC,KAAK,QAEP,SAAC,KAAD,WACE,SAAC,IAAD,CACE,aAAW,6BACXE,KAAMhC,GAAO,SAAC,IAAD,KAAe,SAAC,IAAD,IAC5BiC,QA7DE,kBAAMhC,GAASD,EAAf,aAkEV,SAAC,IAAD,CAAQkC,EAAE,OAAOC,GAAG,IAApB,UACE,SAAC,IAAD,CAAQP,KAAK,SAASQ,YAAY,QAAlC,iCASb,C,6GC7FD,SAASzC,EAAS0C,GAChB,IAAQC,GAAUC,EAAAA,EAAAA,MAAVD,MACFE,GAAiBC,EAAAA,EAAAA,MACvB,OAAOC,EAAAA,EAAAA,UACL,kBAAMC,EAAAA,EAAAA,IAAcL,EAAMZ,WAAP,QAAC,UACfc,GACAH,GAFL,GAIA,CAACA,EAASC,EAAMZ,UAAWc,GAE9B,C","sources":["components/ErrorNotification/ErrorNotification.js","components/RegisterForm/RegisterForm.js","../node_modules/@chakra-ui/toast/dist/chunk-JFERWNZE.mjs"],"sourcesContent":["import {\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  AlertDescription,\n} from '@chakra-ui/react';\n\nexport const ErrorComponent = ({ action }) => {\n  return (\n    <Alert status=\"error\">\n      <AlertIcon />\n      <AlertTitle>Sorry, {action} failed</AlertTitle>\n      <AlertDescription>Please try again</AlertDescription>\n    </Alert>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport {\n  Card,\n  Center,\n  CardBody,\n  useToast,\n  Box,\n  Input,\n  Button,\n  Container,\n  FormLabel,\n  InputRightAddon,\n  IconButton,\n  InputGroup,\n} from '@chakra-ui/react';\nimport { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { ErrorComponent } from 'components/ErrorNotification/ErrorNotification';\nimport { ViewIcon, ViewOffIcon } from '@chakra-ui/icons';\nimport { selectAuthError } from 'redux/auth/selectors';\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n  const toast = useToast();\n  const error = useSelector(selectAuthError);\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const name = form.elements.name.value;\n    const email = form.elements.email.value;\n    const password = form.elements.password.value;\n    if (name === '' || email === '' || password === '') {\n      return toast({\n        title: 'All fields are required',\n        position: 'top',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    } else if (password.length < 6) {\n      return toast({\n        title: 'Password must contain at least 7 symbols!',\n        position: 'top',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n    dispatch(register({ name, email, password })).unwrap().then(console.log);\n    form.reset();\n  };\n\n  return (\n    <Box marginTop={4}>\n      <Container>\n        {error && <ErrorComponent action=\"registration\"></ErrorComponent>}\n        <Card\n          as=\"form\"\n          onSubmit={handleSubmit}\n          autoComplete=\"off\"\n          direction=\"column\"\n        >\n          <CardBody>\n            <FormLabel marginTop={2}>\n              Username\n              <Input type=\"text\" name=\"name\" variant=\"flushed\" size=\"md\" />\n            </FormLabel>\n            <FormLabel marginTop={2}>\n              Email\n              <Input type=\"email\" name=\"email\" variant=\"flushed\" size=\"md\" />\n            </FormLabel>\n            <FormLabel marginTop={2}>\n              Password\n              <InputGroup width=\"100%\">\n                <Input\n                  type={show ? 'text' : 'password'}\n                  name=\"password\"\n                  variant=\"flushed\"\n                  size=\"md\"\n                />\n                <InputRightAddon>\n                  <IconButton\n                    aria-label=\"Toggle password visibility\"\n                    icon={show ? <ViewIcon /> : <ViewOffIcon />}\n                    onClick={handleClick}\n                  ></IconButton>\n                </InputRightAddon>\n              </InputGroup>\n            </FormLabel>\n            <Center w=\"100%\" py=\"3\">\n              <Button type=\"submit\" colorScheme=\"green\">\n                Register\n              </Button>\n            </Center>\n          </CardBody>\n        </Card>\n      </Container>\n    </Box>\n  );\n};\n\nexport default RegisterForm;\n","import {\n  useToastOptionContext\n} from \"./chunk-ZP4IHIHZ.mjs\";\nimport {\n  createToastFn\n} from \"./chunk-RANSABEB.mjs\";\n\n// src/use-toast.tsx\nimport { useChakra } from \"@chakra-ui/system\";\nimport { useMemo } from \"react\";\nfunction useToast(options) {\n  const { theme } = useChakra();\n  const defaultOptions = useToastOptionContext();\n  return useMemo(\n    () => createToastFn(theme.direction, {\n      ...defaultOptions,\n      ...options\n    }),\n    [options, theme.direction, defaultOptions]\n  );\n}\nvar use_toast_default = useToast;\n\nexport {\n  useToast,\n  use_toast_default\n};\n"],"names":["ErrorComponent","action","status","dispatch","useDispatch","toast","useToast","error","useSelector","selectAuthError","useState","show","setShow","marginTop","as","onSubmit","e","preventDefault","form","currentTarget","name","elements","value","email","password","title","position","duration","isClosable","length","register","unwrap","then","console","log","reset","autoComplete","direction","I","type","variant","size","width","icon","onClick","w","py","colorScheme","options","theme","useChakra","defaultOptions","useToastOptionContext","useMemo","createToastFn"],"sourceRoot":""}