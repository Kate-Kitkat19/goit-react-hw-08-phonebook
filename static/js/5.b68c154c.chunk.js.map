{"version":3,"file":"static/js/5.b68c154c.chunk.js","mappings":"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","sources":["components/ContactForm/Validation.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactCard/ContactCard.jsx","redux/filter/selectors.js","components/Contacts/Contacts.jsx","components/Filter/Filter.jsx","components/HomePage/HomePage.js"],"sourcesContent":["import * as Yup from 'yup';\n\nexport const ValidationSchema = Yup.object().shape({\n  name: Yup.string()\n    .matches(\n      /(^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$)/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required('This field is required'),\n    number: Yup.string()\n    .matches(\n      /(\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9})/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('This field is required'),\n});\n","export const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectContacts = state => state.contacts.items;","import { Formik, ErrorMessage, Field, Form } from 'formik';\nimport React from 'react';\n\nimport { ValidationSchema } from './Validation';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport { Icon } from '@chakra-ui/react';\nimport { Alert } from '@chakra-ui/react';\n\nimport {\n  Input,\n  VStack,\n  InputGroup,\n  InputLeftElement,\n  Button,\n} from '@chakra-ui/react';\nimport { PhoneIcon } from '@chakra-ui/icons';\nimport { ImUser } from 'react-icons/im';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const INITIAL_VALUES = {\n    name: '',\n    number: '',\n  };\n\n  const handleSubmit = (values, { resetForm }) => {\n    const contactName = values.name.toLowerCase();\n    const isSaved = contacts.find(\n      contact => contact.name.toLowerCase() === contactName\n    );\n    if (isSaved) {\n      alert(`${values.name} is already in contacts`);\n    } else {\n      dispatch(addContact({ name: values.name, number: values.number }));\n    }\n    resetForm();\n  };\n\n  return (\n    <Formik\n      onSubmit={handleSubmit}\n      validationSchema={ValidationSchema}\n      initialValues={{ ...INITIAL_VALUES }}\n    >\n      <Form>\n        <VStack spacing={4}>\n          <InputGroup>\n            <InputLeftElement\n              pointerEvents=\"none\"\n              children={<Icon as={ImUser} color=\"gray.300\" />}\n            />\n            <Field\n              as={Input}\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Name\"\n              width=\"auto\"\n            ></Field>\n            <ErrorMessage as={Alert} status=\"error\" name=\"name\"></ErrorMessage>\n          </InputGroup>\n          <InputGroup>\n            <InputLeftElement\n              pointerEvents=\"none\"\n              children={<PhoneIcon color=\"gray.300\" />}\n            />\n            <Field\n              as={Input}\n              type=\"tel\"\n              name=\"number\"\n              placeholder=\"Phone number\"\n              width=\"auto\"\n            ></Field>\n            <ErrorMessage status=\"error\" name=\"number\"></ErrorMessage>\n          </InputGroup>\n\n          <Button\n            type=\"submit\"\n            aria-label=\"Add contact\"\n            size=\"lg\"\n            colorScheme=\"green\"\n          >\n            Submit\n          </Button>\n        </VStack>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n","import { PropTypes } from 'prop-types';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { useDispatch } from 'react-redux';\n\n\nimport { DeleteIcon } from '@chakra-ui/icons';\n\nexport const ContactCard = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n  function deleteItem(id) {\n    dispatch(deleteContact(id))\n  }\n\n  return (\n    <div>\n      <div>\n        <span>{name}</span>\n        <span>{number}</span>\n      </div>\n      <button type=\"button\" onClick={() => deleteItem(id)}>\n        Delete contact <DeleteIcon />\n      </button>\n    </div>\n  );\n};\n\nContactCard.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n","\nexport const selectFilter = state => state.filter;\n\n","import { ContactCard } from '../ContactCard/ContactCard';\nimport { selectFilter } from 'redux/filter/selectors';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { useSelector } from 'react-redux';\n\nexport const Contacts = () => {\n  const contactList = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const visibleContacts = filter\n    ? contactList.filter(person =>\n        person.name.toLowerCase().includes(filter.toLowerCase())\n      )\n    : contactList;\n\n  return (\n    <ul>\n      {visibleContacts.map(({ name, number, id }) => {\n        return (\n          <li key={id}>\n            <ContactCard name={name} number={number} id={id} />\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n","\nimport { useDispatch } from 'react-redux';\nimport { updateFilter } from 'redux/filter/filtersSlice';\nimport { Input } from '@chakra-ui/react';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  function handleUpdate(evt) {\n    const query = evt.target.value;\n    dispatch(updateFilter(query));\n  }\n\n  return (\n    <Input\n      variant=\"outline\"\n      placeholder=\"Find contact by name\"\n      type=\"text\"\n      name=\"filter\"\n      width='auto'\n      onChange={handleUpdate}\n    />\n  );\n};\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport { Contacts } from 'components/Contacts/Contacts';\nimport { Filter } from 'components/Filter/Filter';\n\nimport {\n  selectError,\n  selectIsLoading,\n  selectContacts,\n} from 'redux/contacts/selectors';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nconst HomePage = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const contactList = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ContactForm></ContactForm>\n      <Filter></Filter>\n      {contactList.length > 0 && <h2>Contacts</h2>}\n      {isLoading && !error && <b>Loading...</b>}\n      <Contacts></Contacts>\n    </>\n  );\n};\n\nexport default HomePage;\n"],"names":["ValidationSchema","Yup","shape","name","matches","required","number","selectIsLoading","state","contacts","isLoading","selectError","error","selectContacts","items","useSelector","dispatch","useDispatch","onSubmit","values","resetForm","contactName","toLowerCase","find","contact","alert","addContact","validationSchema","initialValues","spacing","pointerEvents","children","as","ImUser","color","Input","type","placeholder","width","Alert","status","size","colorScheme","ContactCard","id","onClick","deleteContact","deleteItem","selectFilter","filter","Contacts","contactList","visibleContacts","person","includes","map","Filter","I","variant","onChange","evt","query","target","value","updateFilter","useEffect","fetchContacts","length"],"sourceRoot":""}